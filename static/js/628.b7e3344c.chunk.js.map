{"version":3,"file":"static/js/628.b7e3344c.chunk.js","mappings":"iPAEaA,EAAOC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gDAKlBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oHAQpBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4VAoBpBK,EAAMP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,od,0DCzBnBO,EAAcC,EAAAA,KAExBC,MAAM,CACLC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,qBACpDC,SAAUJ,EAAAA,KAEPK,IAAI,EAAG,+CACPF,SAAS,0BAEbA,WAEI,SAASG,IAAa,IAADC,EAAAC,EACpBC,GAAWC,EAAAA,EAAAA,MAEjBC,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEX,MAAO,GAAIE,SAAU,IACtCU,UAAUC,EAAAA,EAAAA,GAAYhB,KALtBiB,EAAQL,EAARK,SACAC,EAAYN,EAAZM,aACaC,EAAMP,EAAnBQ,UAAaD,OAoBf,OAGEE,EAAAA,EAAAA,MAAC/B,EAAI,CAACgC,SAAUJ,GAjBD,SAAHK,GAA6B,IAAvBpB,EAAKoB,EAALpB,MAAOE,EAAQkB,EAARlB,SACzBK,GAASc,EAAAA,EAAAA,IAAM,CAAErB,MAAAA,EAAOE,SAAAA,KACrBoB,SACAC,MAAK,SAAAC,GACJC,IAAAA,OAAAA,QAAwB,6BAADC,OAA8BF,EAAKG,KAAKC,MACjE,IACCC,OAAM,SAAAC,GACC,wCAANA,EACIL,IAAAA,OAAAA,QAAwB,2BACxBA,IAAAA,OAAAA,QAAwB,2CAC9B,GAEJ,IAKyCM,SAAA,EACnCC,EAAAA,EAAAA,KAACzC,EAAK,CAAC0C,QAAQ,QAAOF,SAAC,WACvBC,EAAAA,EAAAA,KAACvC,GAAKyC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKpB,EAAS,UAAQ,IAAEqB,KAAK,QAAQC,GAAG,YAC9CJ,EAAAA,EAAAA,KAAA,KAAAD,SAAgB,QAAhB1B,EAAIW,EAAOhB,aAAK,IAAAK,OAAA,EAAZA,EAAcgC,WAClBL,EAAAA,EAAAA,KAACzC,EAAK,CAAC0C,QAAQ,WAAUF,SAAC,cAC1BC,EAAAA,EAAAA,KAACvC,GAAKyC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKpB,EAAS,aAAW,IAAEqB,KAAK,WAAWC,GAAG,eACpDJ,EAAAA,EAAAA,KAAA,KAAAD,SAAmB,QAAnBzB,EAAIU,EAAOd,gBAAQ,IAAAI,OAAA,EAAfA,EAAiB+B,WACrBL,EAAAA,EAAAA,KAACrC,EAAG,CAACwC,KAAK,SAAQJ,SAAC,YAG3B,C,cCzDe,SAASO,IACtB,OACEpB,EAAAA,EAAAA,MAAA,OAAAa,SAAA,EACEC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAAAR,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,aAETC,EAAAA,EAAAA,KAAC5B,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 320px;\n  margin-top: 16px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 0 0 8px;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 25px;\n  border-radius: 6px;\n  outline: none;\n  border: 1px solid;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.5);\n  margin-bottom: 16px;\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\n\nexport const BTN = styled.button`\n  margin-top: 14px;\n  font-size: 16px;\n  font-weight: 600;\n  padding: 6px;\n  width: 250px;\n  height: 50px;\n  flex-shrink: 0;\n  border-radius: 33.5px;\n  background: #b11228;\n  color: #fff;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #a01313;\n    box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { Form, Label, Input, BTN } from './LoginForm.styled'\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n\n\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(8, 'Password must be at least 8 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { email: '', password: '' },\n    resolver: yupResolver(loginSchema),\n  });\n\n  const onSubmit = ({ email, password }) => {\n    dispatch(logIn({ email, password }))\n      .unwrap()\n      .then(resp => {\n        Notiflix.Notify.success(`Successfully logged in as ${resp.user.name}`);\n      })\n      .catch(e => {\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure('Wrong email or password')\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!');\n      });\n    // reset();\n  };\n\n  return (\n\n\n    <Form onSubmit={handleSubmit(onSubmit)}>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input {...register('email')} type=\"email\" id=\"email\" />\n        <p>{errors.email?.message}</p>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input {...register('password')} type=\"password\" id=\"password\" />\n        <p>{errors.password?.message}</p>\n        <BTN type=\"submit\">Login</BTN>\n      </Form>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","BTN","_templateObject4","loginSchema","yup","shape","email","required","password","min","LoginForm","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","_jsxs","onSubmit","_ref","logIn","unwrap","then","resp","Notiflix","concat","user","name","catch","e","children","_jsx","htmlFor","_objectSpread","type","id","message","Login","Helmet"],"sourceRoot":""}