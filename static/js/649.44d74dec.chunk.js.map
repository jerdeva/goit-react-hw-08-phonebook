{"version":3,"file":"static/js/649.44d74dec.chunk.js","mappings":"iPAEaA,EAAOC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2BAIlBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,2EAMpBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4VAoBpBK,EAAMP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2Z,0DCxBnBO,EAAqBC,EAAAA,KAE/BC,MAAM,CACLC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAOL,EAAAA,KAAaK,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUN,EAAAA,KAEPO,IAAI,EAAG,+CACPH,SAAS,0BAEbA,WAEI,SAASI,IAAgB,IAADC,EAAAC,EAAAC,EACvBC,GAAWC,EAAAA,EAAAA,MAEjBC,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEd,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDW,UAAUC,EAAAA,EAAAA,GAAYnB,KANtBoB,EAAQL,EAARK,SACAC,EAAYN,EAAZM,aACaC,EAAMP,EAAnBQ,UAAaD,OAqBf,OACFE,EAAAA,EAAAA,MAAClC,EAAI,CAACmC,SAAUJ,GAfG,SAAHK,GAAmC,IAA7BvB,EAAIuB,EAAJvB,KAAMG,EAAKoB,EAALpB,MAAOC,EAAQmB,EAARnB,SAC/BM,GAASc,EAAAA,EAAAA,IAAQ,CAAExB,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,KAC7BqB,SACAC,MAAK,kBAAMC,IAAAA,OAAAA,QAAwB,gCAAgC,IACnEC,OAAM,SAAAC,GAAC,MACA,wCAANA,EACIF,IAAAA,OAAAA,QACE,8CAEFA,IAAAA,OAAAA,QAAwB,2CAA2C,GAG7E,IAGqCG,SAAA,EAC/BC,EAAAA,EAAAA,KAACxC,EAAK,CAACyC,QAAQ,OAAMF,SAAC,UACtBC,EAAAA,EAAAA,KAACtC,GAAKwC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKhB,EAAS,SAAO,IAAEiB,KAAK,OAAOC,GAAG,WAC5CJ,EAAAA,EAAAA,KAAA,KAAAD,SAAe,QAAfvB,EAAIY,EAAOnB,YAAI,IAAAO,OAAA,EAAXA,EAAa6B,WACjBL,EAAAA,EAAAA,KAACxC,EAAK,CAACyC,QAAQ,QAAOF,SAAC,WACvBC,EAAAA,EAAAA,KAACtC,GAAKwC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKhB,EAAS,UAAQ,IAAEiB,KAAK,QAAQC,GAAG,YAC9CJ,EAAAA,EAAAA,KAAA,KAAAD,SAAgB,QAAhBtB,EAAIW,EAAOhB,aAAK,IAAAK,OAAA,EAAZA,EAAc4B,WAClBL,EAAAA,EAAAA,KAACxC,EAAK,CAACyC,QAAQ,WAAUF,SAAC,cAC1BC,EAAAA,EAAAA,KAACtC,GAAKwC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKhB,EAAS,aAAW,IAAEiB,KAAK,WAAWC,GAAG,eACpDJ,EAAAA,EAAAA,KAAA,KAAAD,SAAmB,QAAnBrB,EAAIU,EAAOf,gBAAQ,IAAAK,OAAA,EAAfA,EAAiB2B,WACrBL,EAAAA,EAAAA,KAACpC,EAAG,CAACuC,KAAK,SAAQJ,SAAC,eAG3B,C,cChEe,SAASO,IACtB,OACEhB,EAAAA,EAAAA,MAAA,OAAAS,SAAA,EACEC,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAAAR,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAACzB,EAAY,MAGnB,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 320px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin: 0 0 8px;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 25px;\n  border-radius: 6px;\n  outline: none;\n  border: 1px solid;\n  padding: 5px;\n  background-color: #ffffff;\n  box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.5);\n  margin-bottom: 16px;\n\n  @media screen and (max-width: 768px) {\n    width: 250px;\n  }\n\n  &:focus {\n    border-color: #00ff00;\n  }\n`;\n\nexport const BTN = styled.button`\n  margin-top: 14px;\n  padding: 6px;\n  width: 250px;\n  height: 50px;\n  flex-shrink: 0;\n  border-radius: 33.5px;\n  background: #3cb3ab;\n  border: none;\n  &:hover {\n    color: #fff;\n    background-color: #147a73;\n    box-shadow: 1px 2px 6px 0px rgba(33, 83, 60, 0.7);\n  }\n  box-shadow: 0 2px 4px rgba(33, 83, 60, 0.5);\n\n  @media screen and (max-width: 768px) {\n    font-size: 18px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { registr } from 'redux/auth/operations';\nimport { BTN, Form, Input, Label } from './RegisterForm.styled'\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup\n      .string()\n      .min(7, 'Password must be at least 7 characters long')\n      .required('Password is required'),\n  })\n  .required();\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    // reset,\n  } = useForm({\n    defaultValues: { name: '', email: '', password: '' },\n    resolver: yupResolver(registrationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(registr({ name, email, password }))\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Account successfully created!'))\n      .catch(e =>\n        e === 'Request failed with status code 400'\n          ? Notiflix.Notify.failure(\n              'This user already exist! Use Log In button'\n            )\n          : Notiflix.Notify.failure('Something went wrong, try one nore time!')\n      );\n    // reset();\n  };\n\n  return (\n<Form onSubmit={handleSubmit(onSubmit)}>\n        <Label htmlFor=\"name\">Name</Label>\n        <Input {...register('name')} type=\"text\" id=\"name\" />\n        <p>{errors.name?.message}</p>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input {...register('email')} type=\"email\" id=\"email\" />\n        <p>{errors.email?.message}</p>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input {...register('password')} type=\"password\" id=\"password\" />\n        <p>{errors.password?.message}</p>\n        <BTN type=\"submit\">Register</BTN>\n      </Form>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","BTN","_templateObject4","registrationSchema","yup","shape","name","matches","required","email","password","min","RegisterForm","_errors$name","_errors$email","_errors$password","dispatch","useDispatch","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","_jsxs","onSubmit","_ref","registr","unwrap","then","Notiflix","catch","e","children","_jsx","htmlFor","_objectSpread","type","id","message","Register","Helmet"],"sourceRoot":""}